// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Orchestrion JS Transformer > should transform CommonJS module correctly 1`] = `
"const { tracingChannel: tr_ch_apm_tracingChannel } = require("diagnostics_channel");
const tr_ch_apm$up_fetch = tr_ch_apm_tracingChannel("orchestrion:one:up:fetch");
const tr_ch_apm$up_constructor = tr_ch_apm_tracingChannel("orchestrion:one:up:constructor");
module.exports = class Up {
    constructor(){
        const tr_ch_apm_ctx$up_constructor = {
            arguments
        };
        try {
            if (tr_ch_apm$up_constructor.hasSubscribers) {
                tr_ch_apm$up_constructor.start.publish(tr_ch_apm_ctx$up_constructor);
            }
            console.log('constructor');
        } catch (tr_ch_err) {
            if (tr_ch_apm$up_constructor.hasSubscribers) {
                tr_ch_apm_ctx$up_constructor.error = tr_ch_err;
                try {
                    tr_ch_apm_ctx$up_constructor.self = this;
                } catch (refErr) {}
                tr_ch_apm$up_constructor.error.publish(tr_ch_apm_ctx$up_constructor);
            }
            throw tr_ch_err;
        } finally{
            if (tr_ch_apm$up_constructor.hasSubscribers) {
                tr_ch_apm_ctx$up_constructor.self = this;
                tr_ch_apm$up_constructor.end.publish(tr_ch_apm_ctx$up_constructor);
            }
        }
    }
    fetch() {
        const traced = ()=>{
            console.log('fetch');
        };
        if (!tr_ch_apm$up_fetch.hasSubscribers) return traced();
        return tr_ch_apm$up_fetch.traceSync(traced, {
            arguments,
            self: this
        });
    }
};
"
`;

exports[`Orchestrion JS Transformer > should transform ESM module correctly 1`] = `
"import { tracingChannel as tr_ch_apm_tracingChannel } from "diagnostics_channel";
const tr_ch_apm$up_fetch = tr_ch_apm_tracingChannel("orchestrion:one:up:fetch");
const tr_ch_apm$up_constructor = tr_ch_apm_tracingChannel("orchestrion:one:up:constructor");
export class Up {
    constructor(){
        const tr_ch_apm_ctx$up_constructor = {
            arguments
        };
        try {
            if (tr_ch_apm$up_constructor.hasSubscribers) {
                tr_ch_apm$up_constructor.start.publish(tr_ch_apm_ctx$up_constructor);
            }
            console.log('constructor');
        } catch (tr_ch_err) {
            if (tr_ch_apm$up_constructor.hasSubscribers) {
                tr_ch_apm_ctx$up_constructor.error = tr_ch_err;
                try {
                    tr_ch_apm_ctx$up_constructor.self = this;
                } catch (refErr) {}
                tr_ch_apm$up_constructor.error.publish(tr_ch_apm_ctx$up_constructor);
            }
            throw tr_ch_err;
        } finally{
            if (tr_ch_apm$up_constructor.hasSubscribers) {
                tr_ch_apm_ctx$up_constructor.self = this;
                tr_ch_apm$up_constructor.end.publish(tr_ch_apm_ctx$up_constructor);
            }
        }
    }
    fetch() {
        const traced = ()=>{
            console.log('fetch');
        };
        if (!tr_ch_apm$up_fetch.hasSubscribers) return traced();
        return tr_ch_apm$up_fetch.traceSync(traced, {
            arguments,
            self: this
        });
    }
}
"
`;

exports[`Orchestrion JS Transformer > should transform TypeScript with source map correctly 1`] = `
"import { tracingChannel as tr_ch_apm_tracingChannel } from "diagnostics_channel";
const tr_ch_apm$up_fetch = tr_ch_apm_tracingChannel("orchestrion:one:up:fetch");
const tr_ch_apm$up_constructor = tr_ch_apm_tracingChannel("orchestrion:one:up:constructor");
export class Up {
    constructor(){
        const tr_ch_apm_ctx$up_constructor = {
            arguments
        };
        try {
            if (tr_ch_apm$up_constructor.hasSubscribers) {
                tr_ch_apm$up_constructor.start.publish(tr_ch_apm_ctx$up_constructor);
            }
            console.log('constructor');
        } catch (tr_ch_err) {
            if (tr_ch_apm$up_constructor.hasSubscribers) {
                tr_ch_apm_ctx$up_constructor.error = tr_ch_err;
                try {
                    tr_ch_apm_ctx$up_constructor.self = this;
                } catch (refErr) {}
                tr_ch_apm$up_constructor.error.publish(tr_ch_apm_ctx$up_constructor);
            }
            throw tr_ch_err;
        } finally{
            if (tr_ch_apm$up_constructor.hasSubscribers) {
                tr_ch_apm_ctx$up_constructor.self = this;
                tr_ch_apm$up_constructor.end.publish(tr_ch_apm_ctx$up_constructor);
            }
        }
    }
    fetch(url) {
        const traced = ()=>{
            console.log('fetch');
        };
        if (!tr_ch_apm$up_fetch.hasSubscribers) return traced();
        return tr_ch_apm$up_fetch.traceSync(traced, {
            arguments,
            self: this
        });
    }
}
"
`;

exports[`Orchestrion JS Transformer > should transform TypeScript with source map correctly 2`] = `"{"version":3,"file":"typescript.js","sources":["typescript.ts"],"sourceRoot":"","names":[],"mappings":";;;AAAA,MAAM,CAAA,MAAO,EAAE;IACd,aAAA;;;;;;;;YACC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAA;;;;;;;;;;;;;;;;IAC3B,CAAC;IAED,KAAK,CAAC,GAAW,EAAA;;YAChB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;;;;;;;IACrB,CAAC;CACD"}"`;
